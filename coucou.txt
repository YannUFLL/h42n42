===== drag.eliom =====
[%%client
open Js_of_ocaml
open Js_of_ocaml_lwt

type 'a callbacks =
  { on_start : 'a -> float -> float -> unit
  ; on_move : 'a -> float -> float -> unit
  ; on_end : 'a -> float -> unit
  ; get_pos : 'a -> float * float
  ; get_dom : 'a -> Dom_html.element Js.t
  ; get_listener : 'a -> unit Lwt.t option
  ; set_listener : 'a -> unit Lwt.t option -> unit }

type 'a t =
  { cb : 'a callbacks
  ; mutable current : 'a option
  ; mutable offset : float * float }

let create callbacks = {cb = callbacks; current = None; offset = 0., 0.}

let compute_offset t ev =
  let mouse_x = float_of_int ev##.clientX in
  let mouse_y = float_of_int ev##.clientY in
  let obj_x, obj_y = t.cb.get_pos (Option.get t.current) in
  t.offset <- mouse_x -. obj_x, mouse_y -. obj_y

let handle_move t ev _ =
  match t.current with
  | None -> Lwt.return_unit
  | Some elt ->
      let dx, dy = t.offset in
      let x = float_of_int ev##.clientX -. dx in
      let y = float_of_int ev##.clientY -. dy in
      t.cb.on_move elt x y; Lwt.return_unit

let handle_up t ev _ =
  match t.current with
  | None -> Lwt.return_unit
  | Some elt ->
      t.current <- None;
      let _, dy = t.offset in
      let y = float_of_int ev##.clientY -. dy in
      t.cb.on_end elt y; Lwt.return_unit

let attach_global_listeners t =
  Lwt.async (fun () ->
    Lwt_js_events.mousemoves Dom_html.document (handle_move t));
  Lwt.async (fun () -> Lwt_js_events.mouseups Dom_html.document (handle_up t))

let start_drag t elt ev =
  Dom.preventDefault ev;
  t.current <- Some elt;
  compute_offset t ev;
  let obj_x, obj_y = t.cb.get_pos elt in
  t.cb.on_start elt obj_x obj_y;
  Lwt.return_unit

let attach t elt =
  let dom = t.cb.get_dom elt in
  let listener =
    Lwt_js_events.mousedowns dom (fun ev _ -> start_drag t elt ev)
  in
  t.cb.set_listener elt (Some listener)

let dettach t elt =
  match t.cb.get_listener elt with
  | None -> ()
  | Some listener -> Lwt.cancel listener]

===== game.eliom =====
open Eliom_content.Html.F

[%%client
open Js_of_ocaml
open Js_of_ocaml_lwt

type creet_state = Healthy | Infected | Berserk | Mean

type creet =
  { id : string
  ; mutable x : float
  ; mutable y : float
  ; mutable dx : float
  ; mutable dy : float
  ; mutable state : creet_state
  ; mutable available : bool
  ; mutable is_dead : bool
  ; mutable r_size : float
  ; mutable infected_time : float
  ; mutable move_listener : Dom_html.event_listener_id option
  ; mutable up_listener : Dom_html.event_listener_id option
  ; mutable dom : Dom_html.divElement Js.t
  ; mutable eye_1 : Dom_html.divElement Js.t
  ; mutable eye_2 : Dom_html.divElement Js.t
  ; mutable pupil_1 : Dom_html.divElement Js.t
  ; mutable pupil_2 : Dom_html.divElement Js.t
  ; mutable phage_list : Dom_html.divElement Js.t list
  ; mutable listener : unit Lwt.t option }

type game_state =
  { mutable creets : creet list
  ; mutable is_running : bool
  ; mutable timer : float
  ; drag_controller : creet Drag.t }]

let%shared r_growing_speed = 0.1
let%shared river_height = 50
let%shared hospital_height = 50
let%shared game_area_height = 500
let%shared game_area_width = 500
let%shared playground_height = 400
let%shared mean_color = "violet"
let%shared berserk_color = "orange"
let%shared infected_color = "green"
let%shared healthy_color = "gray"
let%shared direction_change_probability = 0.005
let%shared mean_reduce_factor = 0.85
let%shared mean_speed_acceleration = 0.0005
let%shared shrink_speed = 0.01
let%shared death_random_factor = 0.01
let%shared creet_duplication_chance = ref 0.0001
let%shared game_acceleration = ref 0.0005
let%shared creet_base_radius = ref 20
let%shared number_of_creet_at_start = ref 5
let%shared time_to_die = ref 12.0
let%shared accel_scale = 10000.
let%shared dup_scale = 10000.
let%shared time_scale = 1.
let%client on_game_end : (unit -> unit) option ref = ref None
let%client set_on_game_end_callback f = on_game_end := Some f
let%client hospital_line = float_of_int (game_area_height - hospital_height)
let%client drag_controller = ref None
let%shared creet_base_speed = ref 0.2
let%shared creet_random_speed_range = ref 0.1

let%server game_area =
  div
    ~a:
      [ a_id "game_area"
      ; a_style
          ("position: relative; width: "
          ^ string_of_int game_area_width
          ^ "px; height: "
          ^ string_of_int game_area_height
          ^ "px;") ]
    [ div
        ~a:
          [a_id "river"; a_style ("height:" ^ string_of_int river_height ^ "px")]
        []
    ; div
        ~a:
          [ a_id "playground"
          ; a_style
              ("height:"
              ^ string_of_int playground_height
              ^ "px; position:relative;") ]
        []
    ; div
        ~a:
          [ a_id "hospital"
          ; a_style ("height:" ^ string_of_int hospital_height ^ "px") ]
        [] ]

let%client check_collision c1 c2 =
  let center c = c.x +. c.r_size, c.y +. c.r_size in
  let x1, y1 = center c1 in
  let x2, y2 = center c2 in
  let dx = x1 -. x2 in
  let dy = y1 -. y2 in
  let dist2 = (dx *. dx) +. (dy *. dy) in
  let rsum = c1.r_size +. c2.r_size in
  let coll = dist2 < rsum *. rsum in
  coll

let%client set_scatter_vars (elt : #Dom_html.element Js.t) : unit =
  let angle = Random.float 360. in
  let dist = 50. +. Random.float 100. in
  let dx = cos (angle *. Float.pi /. 180.) *. dist in
  let dy = sin (angle *. Float.pi /. 180.) *. dist in
  ignore
    (elt##.style##setProperty
       (Js.string "--dx")
       (Js.string (Printf.sprintf "%.1fpx" dx))
       Js.undefined);
  ignore
    (elt##.style##setProperty
       (Js.string "--dy")
       (Js.string (Printf.sprintf "%.1fpx" dy))
       Js.undefined);
  ignore
    (elt##.style##setProperty
       (Js.string "--rot")
       (Js.string (Printf.sprintf "%.1fdeg" angle))
       Js.undefined)

let%client clear_phages creet =
  List.iter
    (fun ph ->
       match Js.Opt.to_option ph##.parentNode with
       | Some parent -> Dom.removeChild parent ph
       | None -> ())
    creet.phage_list;
  creet.phage_list <- []

let%client reset_eye eye =
  eye##.style##.transform := Js.string "none";
  eye##.style##.width := Js.string "40%";
  eye##.style##.height := Js.string "40%";
  eye##.style##.background := Js.string "white"

let%client change_class_state new_state creet : unit =
  creet.state <- new_state;
  if new_state = Healthy
  then (clear_phages creet; reset_eye creet.eye_1; reset_eye creet.eye_2);
  let state_class =
    match new_state with
    | Healthy -> "healthy"
    | Infected -> "infected"
    | Berserk -> "berserk"
    | Mean -> "mean"
  in
  creet.dom##.className := Js.string ("cell-sprite " ^ state_class)

let%client spawn_phage creet =
  let ph = Dom_html.createDiv Dom_html.document in
  ph##.className := Js.string "phage";
  let creet_radius = creet.r_size in
  let phage_size = 20. in
  let center = creet_radius -. (phage_size /. 2.) in
  let angle = Random.float (2. *. Float.pi) in
  let dist = creet_radius *. 0.8 *. Random.float 1.0 in
  let x = center +. (cos angle *. dist) in
  let y = center +. (sin angle *. dist) in
  ph##.style##.left := Js.string (Printf.sprintf "%fpx" x);
  ph##.style##.top := Js.string (Printf.sprintf "%fpx" y);
  Dom.appendChild creet.dom ph;
  creet.phage_list <- ph :: creet.phage_list;
  set_scatter_vars ph

let%client random_eye_deform eye =
  let should_move = Random.float 1.0 < 0.75 in
  let should_resize = Random.float 1.0 < 0.5 in
  if should_move
  then
    let dx = Random.float 32. -. 16. in
    let dy = Random.float 32. -. 16. in
    eye##.style##.transform
    := Js.string (Printf.sprintf "translate(%g%%,%g%%)" dx dy)
  else eye##.style##.transform := Js.string "none";
  if should_resize
  then (
    let base = 40. in
    let size = base +. (Random.float 40. -. 20.) in
    eye##.style##.width := Js.string (Printf.sprintf "%g%%" size);
    eye##.style##.height := Js.string (Printf.sprintf "%g%%" size))
  else (
    eye##.style##.width := Js.string "40%";
    eye##.style##.height := Js.string "40%");
  ()

let%client infect_creet game_state creet =
  let n = Random.int 10 in
  let new_state =
    if n = 0
    then Berserk (* 1/10 *)
    else if n = 1
    then Mean (* 1/10 *)
    else Infected (* 8/10 *)
  in
  change_class_state new_state creet;
  creet.infected_time <- game_state.timer;
  match new_state with
  | Infected ->
      random_eye_deform creet.eye_1;
      random_eye_deform creet.eye_2;
      creet.dx <- creet.dx *. 0.85;
      creet.dy <- creet.dy *. 0.85
  | Mean ->
      creet.dx <- creet.dx *. 0.85;
      creet.dy <- creet.dy *. 0.85;
      creet.r_size <- float_of_int !creet_base_radius *. mean_reduce_factor;
      let px = string_of_int (int_of_float (creet.r_size *. 2.)) ^ "px" in
      creet.dom##.style##.width := Js.string px;
      creet.dom##.style##.height := Js.string px;
      random_eye_deform creet.eye_1;
      random_eye_deform creet.eye_2
  | Berserk ->
      random_eye_deform creet.eye_1;
      random_eye_deform creet.eye_2;
      creet.dx <- creet.dx *. 0.85;
      creet.dy <- creet.dy *. 0.85
  | Healthy -> ()

let%client propagate_infection game_state creet =
  if creet.state = Infected || creet.state = Berserk || creet.state = Mean
  then
    List.iter
      (fun target ->
         if
           target != creet && target.state = Healthy && target.available
           && (not target.is_dead)
           && check_collision creet target
           && Random.int 100 < 2
         then infect_creet game_state target)
      game_state.creets

let%client closest_healthy_creet creet creets =
  List.filter (fun c -> c.state = Healthy) creets
  |> List.fold_left
       (fun (min_c, min_dist) c ->
          let dx = c.x -. creet.x in
          let dy = c.y -. creet.y in
          let dist = (dx *. dx) +. (dy *. dy) in
          match min_c with
          | None -> Some c, dist
          | Some _ when dist < min_dist -> Some c, dist
          | _ -> min_c, min_dist)
       (None, max_float)
  |> fst

let%client check_border_collision creet =
  if creet.x < 0.
  then (
    creet.x <- 0.;
    creet.dx <- -.creet.dx)
  else if creet.x > float_of_int game_area_width -. (creet.r_size *. 2.)
  then (
    creet.x <- float_of_int game_area_width -. (creet.r_size *. 2.);
    creet.dx <- -.creet.dx);
  if creet.y < 0.
  then (
    creet.y <- 0.;
    creet.dy <- -.creet.dy)
  else if creet.y > float_of_int game_area_height -. (creet.r_size *. 2.)
  then (
    creet.y <- float_of_int game_area_height -. (creet.r_size *. 2.);
    creet.dy <- -.creet.dy)

let%client handle_infected_creet game_state creet =
  match creet.state with
  | Berserk ->
      if creet.r_size < float_of_int (4 * !creet_base_radius)
      then (
        creet.r_size <- creet.r_size +. r_growing_speed;
        creet.dom##.style##.width
        := Js.string (string_of_int (int_of_float (creet.r_size *. 2.)) ^ "px");
        creet.dom##.style##.height
        := Js.string (string_of_int (int_of_float (creet.r_size *. 2.)) ^ "px"));
      if Random.float 1.0 < 0.01 then spawn_phage creet
  | Mean -> (
      if Random.float 1.0 < 0.005 then spawn_phage creet;
      if creet.r_size > float_of_int !creet_base_radius *. mean_reduce_factor
      then (
        creet.dom##.style##.width
        := Js.string (string_of_int (int_of_float (creet.r_size *. 2.)) ^ "px");
        creet.dom##.style##.height
        := Js.string (string_of_int (int_of_float (creet.r_size *. 2.)) ^ "px"));
      match closest_healthy_creet creet game_state.creets with
      | Some target ->
          let dx = target.x -. creet.x in
          let dy = target.y -. creet.y in
          let dist = sqrt ((dx *. dx) +. (dy *. dy)) +. 0.0001 in
          let base_speed =
            sqrt ((creet.dx *. creet.dx) +. (creet.dy *. creet.dy))
          in
          let speed = base_speed +. mean_speed_acceleration in
          creet.dx <- dx /. dist *. speed;
          creet.dy <- dy /. dist *. speed
      | None -> ())
  | Infected ->
      if creet.state = Infected && Random.float 1.0 < 0.005
      then spawn_phage creet
  | _ -> ()

let%client check_river game_state creet =
  if creet.state = Healthy && creet.y <= float_of_int river_height
  then infect_creet game_state creet

let%client random_rotation creet =
  if Random.float 1.0 < direction_change_probability
  then (
    let angle = Random.float (2. *. Float.pi) in
    let speed = sqrt ((creet.dx *. creet.dx) +. (creet.dy *. creet.dy)) in
    creet.dx <- cos angle *. speed;
    creet.dy <- sin angle *. speed)

let%client remove_creet game_state creet =
  creet.is_dead <- true;
  creet.dom##.classList##add (Js.string "explode");
  Drag.dettach game_state.drag_controller creet;
  let on_end _ev =
    (match Js.Opt.to_option creet.dom##.parentNode with
    | Some parent -> Dom.removeChild parent creet.dom
    | None -> ());
    game_state.creets <- List.filter (fun c -> c != creet) game_state.creets;
    Js._false
  in
  ignore
    (Dom_html.addEventListener creet.dom Dom_html.Event.animationend
       (Dom_html.handler on_end) Js._false)

let%client creet_callbacks =
  { Drag.on_start = (fun c _ _ -> c.available <- false)
  ; on_move =
      (fun c x y ->
        c.x <- x;
        c.y <- y;
        c.dom##.style##.left := Js.string (Printf.sprintf "%fpx" x);
        c.dom##.style##.top := Js.string (Printf.sprintf "%fpx" y))
  ; on_end =
      (fun c y ->
        c.available <- true;
        if y +. c.r_size >= hospital_line then change_class_state Healthy c)
  ; get_pos = (fun c -> c.x, c.y)
  ; get_dom = (fun c -> c.dom)
  ; get_listener = (fun c -> c.listener)
  ; set_listener = (fun c listener -> c.listener <- listener) }

let%client check_alive game_state creet =
  if creet.state = Infected || creet.state = Berserk || creet.state = Mean
  then
    let dt = game_state.timer -. creet.infected_time in
    if dt > !time_to_die && Random.float 1.0 < death_random_factor
    then remove_creet game_state creet

let%client rec generate_unique_id game_state =
  let id = "creet" ^ string_of_int (Random.int 1_000_000) in
  if List.exists (fun c -> c.id = id) game_state.creets
  then generate_unique_id game_state
  else id

let%client create_creet id x y creet_state =
  let playground = Dom_html.getElementById "game_area" in
  let creet = Dom_html.createDiv Dom_html.document in
  creet##.id := Js.string id;
  let state_class =
    match creet_state with
    | Healthy -> "healthy"
    | Infected -> "infected"
    | Berserk -> "berserk"
    | Mean -> "mean"
  in
  creet##.className := Js.string ("cell-sprite " ^ state_class);
  creet##.style##.position := Js.string "absolute";
  creet##.style##.left := Js.string (Printf.sprintf "%dpx" x);
  creet##.style##.top := Js.string (Printf.sprintf "%dpx" y);
  let px = string_of_int (!creet_base_radius * 2) ^ "px" in
  creet##.style##.width := Js.string px;
  creet##.style##.height := Js.string px;
  set_scatter_vars creet;
  let mk_eye eye_class =
    let eye = Dom_html.createDiv Dom_html.document in
    eye##.className := Js.string ("cell-eye " ^ eye_class);
    eye##.style##.position := Js.string "absolute";
    eye##.style##.borderRadius := Js.string "50%";
    (Js.Unsafe.coerce eye##.style)##.boxShadow := Js.string "0 0 4px 1px #222";
    let pupil = Dom_html.createDiv Dom_html.document in
    pupil##.className := Js.string "cell-pupil";
    pupil##.style##.position := Js.string "absolute";
    pupil##.style##.background := Js.string "#111";
    pupil##.style##.borderRadius := Js.string "50%";
    Dom.appendChild eye pupil;
    eye, pupil
  in
  let eye_1, pupil_1 = mk_eye "cell-eye-left" in
  let eye_2, pupil_2 = mk_eye "cell-eye-right" in
  Dom.appendChild creet eye_1;
  Dom.appendChild creet eye_2;
  set_scatter_vars eye_1;
  set_scatter_vars eye_2;
  set_scatter_vars pupil_1;
  set_scatter_vars pupil_2;
  Dom.appendChild playground creet;
  let core = Dom_html.createDiv Dom_html.document in
  core##.className := Js.string "cell-core";
  let left_p = 20. +. Random.float 20. in
  let top_p = 40. +. Random.float 20. in
  let size_p = 20. +. Random.float 30. in
  core##.style##.left := Js.string (Printf.sprintf "%.1f%%" left_p);
  core##.style##.top := Js.string (Printf.sprintf "%.1f%%" top_p);
  core##.style##.width := Js.string (Printf.sprintf "%.1f%%" size_p);
  core##.style##.height := Js.string (Printf.sprintf "%.1f%%" size_p);
  Dom.appendChild creet core;
  set_scatter_vars core;
  for _ = 1 to 5 do
    let g = Dom_html.createDiv Dom_html.document in
    g##.className := Js.string "granule";
    let px = 20. +. Random.float 60. in
    let py = 20. +. Random.float 60. in
    g##.style##.left := Js.string (Printf.sprintf "%.1f%%" px);
    g##.style##.top := Js.string (Printf.sprintf "%.1f%%" py);
    let delay = Random.float 2.0 in
    g##.style##.animationDelay := Js.string (Printf.sprintf "%.2fs" delay);
    Dom.appendChild creet g;
    set_scatter_vars g
  done;
  creet, eye_1, eye_2, pupil_1, pupil_2

let%client return_to_normal_size creet =
  match creet.state with
  | Healthy ->
      let base = float_of_int !creet_base_radius in
      if creet.r_size > base
      then creet.r_size <- max base (creet.r_size -. r_growing_speed)
      else if creet.r_size < base
      then creet.r_size <- min base (creet.r_size +. shrink_speed);
      let px = string_of_int (int_of_float (creet.r_size *. 2.)) ^ "px" in
      creet.dom##.style##.width := Js.string px;
      creet.dom##.style##.height := Js.string px
  | _ -> ()

let%client update_pupil_position dx dy (pupil1, pupil2) creet =
  let open Js in
  let base_amp = 30.0 in
  let amp =
    match creet.state with
    | Mean -> base_amp *. 0.5
    | Berserk -> 0.
    | _ -> base_amp
  in
  let mag = sqrt ((dx *. dx) +. (dy *. dy)) in
  let norm_dx, norm_dy = if mag = 0. then 0., 0. else dx /. mag, dy /. mag in
  let percent_x = 50. +. (norm_dx *. amp) in
  let percent_y = 50. +. (norm_dy *. amp) in
  let left_str = Printf.sprintf "%.1f%%" percent_x in
  let top_str = Printf.sprintf "%.1f%%" percent_y in
  pupil1##.style##.left := string left_str;
  pupil1##.style##.top := string top_str;
  pupil2##.style##.left := string left_str;
  pupil2##.style##.top := string top_str

let%client rec creet_loop (game_state : game_state) creet =
  let open Lwt in
  if not game_state.is_running
  then Lwt.return_unit
  else (
    if creet.available && not creet.is_dead
    then (
      let speed = sqrt ((creet.dx *. creet.dx) +. (creet.dy *. creet.dy)) in
      let new_speed = speed +. !game_acceleration in
      if speed > 0.0
      then (
        let ratio = new_speed /. speed in
        creet.dx <- creet.dx *. ratio;
        creet.dy <- creet.dy *. ratio);
      random_rotation creet;
      creet.x <- creet.x +. creet.dx;
      creet.y <- creet.y +. creet.dy;
      check_border_collision creet;
      check_river game_state creet;
      creet.dom##.style##.left := Js.string (Printf.sprintf "%fpx" creet.x);
      creet.dom##.style##.top := Js.string (Printf.sprintf "%fpx" creet.y);
      update_pupil_position creet.dx creet.dy
        (creet.pupil_1, creet.pupil_2)
        creet;
      maybe_duplicate_creet game_state creet;
      handle_infected_creet game_state creet;
      return_to_normal_size creet);
    check_alive game_state creet;
    propagate_infection game_state creet;
    Lwt_js.sleep 0.02 >>= fun () -> creet_loop game_state creet)

and maybe_duplicate_creet game_state creet =
  if creet.state = Healthy && Random.float 1.0 < !creet_duplication_chance
  then (
    let id = generate_unique_id game_state in
    let x = creet.x +. float_of_int (Random.int 30 - 15) in
    let y = creet.y +. float_of_int (Random.int 30 - 15) in
    let dx = creet.dx in
    let dy = creet.dy in
    let dom, eye_1, eye_2, pupil_1, pupil_2 =
      create_creet id (int_of_float x) (int_of_float y) creet.state
    in
    let new_creet =
      { id
      ; x
      ; y
      ; dx
      ; dy
      ; state = Healthy
      ; available = true
      ; is_dead = false
      ; r_size = float_of_int !creet_base_radius
      ; infected_time = 0.0
      ; move_listener = None
      ; up_listener = None
      ; dom
      ; eye_1
      ; eye_2
      ; pupil_1
      ; pupil_2
      ; phage_list = []
      ; listener = None }
    in
    Drag.attach game_state.drag_controller new_creet;
    Lwt.async (fun () -> creet_loop game_state new_creet);
    game_state.creets <- new_creet :: game_state.creets)

let%client rec game_master_loop game_state =
  let open Lwt in
  if
    (not game_state.is_running)
    || game_state.creets = []
    || not (List.exists (fun c -> c.state = Healthy) game_state.creets)
  then (
    (match !on_game_end with Some f -> f () | None -> ());
    List.iter
      (fun c -> if not c.is_dead then remove_creet game_state c)
      game_state.creets;
    game_state.is_running <- false;
    Lwt.return_unit)
  else (
    game_state.timer <- game_state.timer +. 0.02;
    Lwt_js.sleep 0.02 >>= fun () -> game_master_loop game_state)

let%client turn_on_light () =
  let open Js_of_ocaml in
  let add_light_class id =
    match Dom_html.getElementById_coerce id Dom_html.CoerceTo.div with
    | Some el -> el##.classList##add (Js.string "light-on")
    | None -> Firebug.console##log (Js.string ("[⚠️] element not found: " ^ id))
  in
  List.iter add_light_class ["lens-border"; "game_title"; "river"; "hospital"]

let%client init_client () =
  Random.self_init ();
  let creets = ref [] in
  let drag_controller =
    match !drag_controller with
    | Some drag_controller -> drag_controller
    | None ->
        let controller = Drag.create creet_callbacks in
        drag_controller := Some controller;
        Drag.attach_global_listeners controller;
        controller
  in
  for i = 0 to !number_of_creet_at_start - 1 do
    let x = Random.int game_area_width - (!creet_base_radius * 2) in
    let y =
      Random.int
        (game_area_height - (river_height * 4) - (!creet_base_radius * 2))
      + river_height
    in
    let angle = Random.float (2. *. Float.pi) in
    let speed =
      let base = !creet_base_speed in
      let range = !creet_random_speed_range in
      max 0. (base +. ((Random.float 2. -. 1.) *. range))
    in
    let dx = cos angle *. speed in
    let dy = sin angle *. speed in
    let infected = false in
    let dom, eye_1, eye_2, pupil_1, pupil_2 =
      create_creet ("creet" ^ string_of_int i) x y Healthy
    in
    let c =
      { id = "creet" ^ string_of_int i
      ; x = float_of_int x
      ; y = float_of_int y
      ; dx
      ; dy
      ; state = (if infected then Infected else Healthy)
      ; available = true
      ; is_dead = false
      ; r_size = float_of_int !creet_base_radius
      ; infected_time = 0.0
      ; move_listener = None
      ; up_listener = None
      ; dom
      ; eye_1
      ; eye_2
      ; pupil_1
      ; pupil_2
      ; phage_list = []
      ; listener = None }
    in
    Drag.attach drag_controller c;
    creets := c :: !creets
  done;
  let game_state =
    {creets = !creets; is_running = true; timer = 0.0; drag_controller}
  in
  turn_on_light ();
  List.iter
    (fun c -> Lwt.async (fun () -> creet_loop game_state c))
    game_state.creets;
  Lwt.async (fun () -> game_master_loop game_state)

===== h42n42.eliom =====
(* This file was generated by Eliom-distillery. Feel free to use it, modify it,
   and redistribute it as you wish. *)

let%server application_name = "h42n42"
let%client application_name = Eliom_client.get_application_name ()

let%server () =
  Ocsipersist_settings.set_db_file "local/var/data/h42n42/h42n42_db"

(* Create a module for the application. See
   https://ocsigen.org/eliom/manual/clientserver-applications for more
   information. *)
module%shared App = Eliom_registration.App (struct
    let application_name = application_name
    let global_data_path = Some ["__global_data__"]
  end)

(* As the headers (stylesheets, etc) won't change, we ask Eliom not to update
   the <head> of the page when changing page. (This also avoids blinking when
   changing page in iOS). *)
let%client _ = Eliom_client.persist_document_head ()

let%server main_service =
  Eliom_service.create ~path:(Eliom_service.Path [])
    ~meth:(Eliom_service.Get Eliom_parameter.unit) ()

let%client () = print_endline "Hello"

[%%client
let init_client () =
  let open Js_of_ocaml in
  Lwt.async (fun () -> Main_page.show_tutorial_pages 0);
  let btn_dom : Dom_html.divElement Js.t =
    Dom_html.getElementById "start-button"
  in
  Game.set_on_game_end_callback (fun () -> Main_page.reset_game ());
  ignore
    (Js_of_ocaml.Dom_html.addEventListener btn_dom
       Js_of_ocaml.Dom_html.Event.click
       (Js_of_ocaml.Dom_html.handler (fun _ev ->
          Js_of_ocaml.Firebug.console##log (Js.string "clicked !");
          Main_page.lock_settings_panel true;
          Main_page.update_settings_from_inputs ();
          let btn_dom = Js_of_ocaml.Dom_html.getElementById "start-button" in
          btn_dom##.textContent := Js.some (Js.string "Relaunch simulation");
          Game.init_client ();
          Main_page.timer_running := true;
          let start_time =
            (Js_of_ocaml.Js.Unsafe.eval_string "Date.now()" : float) /. 1000.
          in
          Lwt.async (fun () -> Main_page.show_timer start_time);
          Js._false))
       Js._false);
  Lwt.return_unit]

let%server () =
  App.register ~service:main_service (fun () () ->
    let _ = [%client (init_client () : unit Lwt.t)] in
    Lwt.return (Main_page.main_page ()))

===== h42n42_main.eliom =====
(** This is the main file if you are using static linking without config file.
*)

module%shared H42n42 = H42n42

let%server _ =
  Ocsigen_server.start
    ~ports:[`All, 8080]
    ~veryverbose:() ~debugmode:true ~logdir:"local/var/log/h42n42"
    ~datadir:"local/var/data/h42n42" ~uploaddir:(Some "/tmp")
    ~usedefaulthostname:true ~command_pipe:"local/var/run/h42n42-cmd"
    ~default_charset:(Some "utf-8")
    [ Ocsigen_server.host
        [Staticmod.run ~dir:"local/var/www/h42n42" (); Eliom.run ()] ]

===== main_page.eliom =====
open Eliom_content.Html.F

[%%client
open Eliom_content.Html.F
open Js_of_ocaml]

let%client timer_running = ref false
let%client start_time = ref 0.

let%shared start_button =
  button ~a:[a_class ["btn start-game"]; a_id "start-button"] [txt "Start game"]

let%client lock_settings_panel (bool : bool) =
  let open Js_of_ocaml in
  let js_bool = Js.bool bool in
  let disable_input id =
    match Dom_html.getElementById_coerce id Dom_html.CoerceTo.input with
    | Some e -> e##.disabled := js_bool
    | None ->
        Firebug.console##log
          (Js.string
             ("[lock_settings_panel] Input \"" ^ id
            ^ "\" not found or not <input>"))
  in
  let disable_button id =
    match Dom_html.getElementById_coerce id Dom_html.CoerceTo.button with
    | Some e -> e##.disabled := js_bool
    | None ->
        Firebug.console##log
          (Js.string
             ("[lock_settings_panel] Button \"" ^ id
            ^ "\" not found or not <button>"))
  in
  disable_input "input_num_creet";
  disable_input "input_acceleration";
  disable_input "input_duplication";
  disable_input "input_time_to_die";
  disable_input "input_base_radius";
  disable_button "start-button"

let%client update_settings_from_inputs () =
  let get_int_input id =
    match Dom_html.getElementById_coerce id Dom_html.CoerceTo.input with
    | Some input -> input##.value |> Js.to_string |> int_of_string
    | None -> failwith ("Input \"" ^ id ^ "\"  not found or not <input> HTML")
  in
  Game.number_of_creet_at_start := get_int_input "input_num_creet";
  Game.creet_base_radius := get_int_input "input_base_radius";
  let vi = get_int_input "input_acceleration" in
  Game.game_acceleration := float vi /. Game.accel_scale;
  let vd = get_int_input "input_duplication" in
  Game.creet_duplication_chance := float vd /. Game.dup_scale;
  let vt = get_int_input "input_time_to_die" in
  Game.time_to_die := float vt /. Game.time_scale

let%shared settings_panel () =
  div
    ~a:[a_id "settings_panel"]
    [ label
        [ txt "Number of creet at start:"
        ; input
            ~a:
              [ a_input_type `Number
              ; a_value (string_of_int !Game.number_of_creet_at_start)
              ; a_id "input_num_creet"
              ; a_input_min (`Number 1)
              ; a_input_max (`Number 100) ]
            () ]
    ; label
        [ txt "Base radius: "
        ; input
            ~a:
              [ a_input_type `Number
              ; a_value (string_of_int !Game.creet_base_radius)
              ; a_id "input_base_radius"
              ; a_input_min (`Number 5)
              ; a_input_max (`Number 100) ]
            () ]
    ; label
        [ txt "Acceleration speed factor: "
        ; input
            ~a:
              [ a_input_type `Number
              ; a_id "input_acceleration"
              ; a_value
                  (string_of_int
                     (!Game.game_acceleration *. Game.accel_scale
                     |> int_of_float))
              ; a_input_min (`Number 0)
              ; a_input_max (`Number (int_of_float (Game.accel_scale *. 1.0)))
              ]
            () ]
    ; label
        [ txt " Duplication chance factor: "
        ; input
            ~a:
              [ a_input_type `Number
              ; a_id "input_duplication"
              ; a_value
                  (string_of_int
                     (!Game.creet_duplication_chance *. Game.dup_scale
                     |> int_of_float))
              ; a_input_min (`Number 0)
              ; a_input_max (`Number (int_of_float Game.dup_scale)) ]
            () ]
    ; label
        [ txt "Time before can death:"
        ; input
            ~a:
              [ a_input_type `Number
              ; a_id "input_time_to_die"
              ; a_value
                  (string_of_int
                     (!Game.time_to_die *. Game.time_scale |> int_of_float))
              ; a_input_min (`Number 1)
              ; a_input_max (`Number 600) (* max 10 minutes, par ex. *) ]
            () ]
    ; start_button ]

let%client tutorial_pages =
  [| "Booting.", 0.4
   ; "Booting..", 0.4
   ; "Booting...", 0.7
   ; "Booting.", 0.4
   ; "Booting..", 0.4
   ; "Booting...", 0.7
   ; "Welcome to H42N42 — Lab Protocol #42.", 4.0
   ; ( "You are observing a controlled population of micro-organisms under the lens."
     , 4.5 )
   ; ( "An unknown virus, codenamed <b>H42N42</b>, is spreading from the upper contamination zone — the river."
     , 5.5 )
   ; "<b>Your role:</b> interact with the sample in real-time.", 3.6
   ; "Isolate infected cells by moving them to the healing area.", 3.7
   ; ( "Protect the healthy ones — they reproduce as long as they stay uninfected."
     , 5.0 )
   ; ( "Beware: infected specimens may mutate — some grow out of control (<b>Berserk</b>), others become aggressive (<b>Mean</b>) and chase healthy cells."
     , 7.0 )
   ; ( "Delay the outbreak as long as possible.<br>When no healthy cells remain... the simulation ends."
     , 7.0 ) |]

let%client set_side_screen_page (html : string) =
  match
    Dom_html.getElementById_coerce "side-screen-content" Dom_html.CoerceTo.div
  with
  | Some elt -> elt##.innerHTML := Js.string html
  | None -> ()

let%client rec show_tutorial_pages idx =
  let open Lwt in
  let open Js_of_ocaml_lwt in
  if !timer_running
  then Lwt.return_unit
  else if idx < Array.length tutorial_pages
  then (
    let text, delay = tutorial_pages.(idx) in
    set_side_screen_page text;
    Lwt_js.sleep delay >>= fun () -> show_tutorial_pages (idx + 1))
  else Lwt.return_unit

let%client rec show_timer (start : float) =
  let open Js_of_ocaml_lwt in
  let open Lwt in
  start_time := start;
  let now = (Js_of_ocaml.Js.Unsafe.eval_string "Date.now()" : float) /. 1000. in
  let elapsed = now -. start in
  let txt = Printf.sprintf "<b>Time elapsed:</b><br>%.1f s" elapsed in
  set_side_screen_page txt;
  if !timer_running
  then Lwt_js.sleep 0.1 >>= fun () -> show_timer start
  else Lwt.return_unit

let%client reset_game () =
  timer_running := false;
  lock_settings_panel false;
  let elapsed =
    ((Js_of_ocaml.Js.Unsafe.eval_string "Date.now()" : float) /. 1000.)
    -. !start_time
  in
  set_side_screen_page
    (Printf.sprintf "<b>Simulation ended!</b><br><br>Time: %.1f s" elapsed)

let%server main_page () =
  Eliom_content.Html.F.(
    html
      (head
         (title (txt "h42n42"))
         [ meta ~a:[a_charset "utf-8"] ()
         ; css_link
             ~uri:
               (make_uri
                  ~service:(Eliom_service.static_dir ())
                  ["css"; "h42n42.css"])
             () ])
      (body
         [ div ~a:[a_id "introduction_contenair"; a_class ["side"]] []
         ; div
             ~a:[a_id "game_contenair"]
             [ div
                 ~a:[a_id "lens-border"]
                 [ Game.game_area
                 ; div
                     ~a:[a_id "side-screen"]
                     [div ~a:[a_id "side-screen-content"] [txt "Booting..."]]
                 ; div ~a:[a_id "game_title"] [] ]
             ; div
                 ~a:[a_id "pillar-support-container"]
                 [div ~a:[a_id "pillar"] [settings_panel ()]] ]
         ; div ~a:[a_class ["side"]] [] ]))

===== dune =====
(dirs tools client gen assets static local)

(library
 (name h42n42)
 (modules
  (:standard \  H42n42_main ))
 (libraries eliom.server ocsipersist-sqlite ocsipersist-sqlite.settings )
 (library_flags
  (:standard -linkall))
 (wrapped false)
 (preprocess
  (pps
   lwt_ppx
   ;   pgocaml_ppx
   js_of_ocaml-ppx_deriving_json
   
   ;   ocsigen-i18n
   ocsigen-ppx-rpc
   eliom.ppx.server
   --
   --rpc-raw
   ;   --prefix
   ;   H42n42_
   ;   --suffix
   ;   _i18n
   ;   --default-module
   ;   H42n42_i18n
   )))

(executables
 (names h42n42_main)
 (public_names h42n42)
 (modes
  (byte exe)
  (native exe))
 (libraries
  eliom.server
  ocsipersist-sqlite
  ocsigenserver.ext.staticmod
  h42n42
 )
 (modules H42n42_main )
 (preprocess
  (pps
     
   lwt_ppx
   ;   pgocaml_ppx
   js_of_ocaml-ppx_deriving_json
   ;   ocsigen-i18n
   ocsigen-ppx-rpc
   eliom.ppx.server
   ;   --
   ;   --prefix
   ;   H42n42_
   ;   --suffix
   ;   _i18n
   ;   --default-module
   ;   H42n42_i18n
   )))

;(rule
; (target h42n42_i18n.eliom)
; (deps assets/h42n42_i18n.tsv)
; (action
;  (with-stdout-to
;   %{target}
;   (with-stdin-from
;    %{deps}
;    (pipe-stdout
;     (run
;      ocsigen-i18n-generator
;      --languages
;      en,fr
;      --default-language
;      fr
;      %{deps})
;     (run
;      sed
;      "1 s/]/[@@deriving json]]\\n[%%shared [@@@ocaml.warning\"-27\"]]/"))))))

(subdir
 gen
 (rule
  (deps ../tools/gen_dune.ml)
  (action
   (with-stdout-to
    dune.client
    (run ocaml ../tools/gen_dune.ml)))))

(subdir
 client
 (executables
  (names h42n42)
  (modes js byte)
  (preprocess
   (pps
    js_of_ocaml-ppx
    lwt_ppx
    ;    ocsigen-i18n
    ;    --
    ;    --prefix
    ;    H42n42_
    ;    --suffix
    ;    _i18n
    ;    --default-module
    ;    H42n42_i18n
    ))
  (js_of_ocaml
   (build_runtime_flags :standard --enable use-js-string)
   (flags
    :standard
    --enable
    with-js-error
    --enable
    use-js-string
    --no-source-map))
  ; source maps are slow...
  (libraries eliom.client js_of_ocaml-lwt))
 (dynamic_include ../gen/dune.client))

; Main rule:

(rule
 (alias h42n42)
 (deps
  h42n42.cma
  h42n42_main.bc
  h42n42_main.exe
  client/h42n42.bc
  client/h42n42.bc.js
  tools/check_modules.ml)
 (action
  (run ocaml -I +unix -I +str tools/check_modules.ml h42n42)))

===== dune-project =====
(lang dune 3.14)

(dialect
 (name "eliom-server")
 (implementation (extension "eliom"))
 (interface (extension "eliomi")))

(wrapped_executables false)

(formatting (enabled_for ocaml "eliom-server"))

===== Makefile =====
#----------------------------------------------------------------------
#           GLOBAL MAKEFILE
#----------------------------------------------------------------------

# Local settings (optional). See Makefile.local.example for an example.
# WARNING: do not commit to a repository!
-include Makefile.local

# Eliom settings. Contains all variables.
include Makefile.options

# Eliom default makefile
# Makefile.PROJECT_NAME is also included in this makefile
include Makefile.app

===== Makefile.app =====
##----------------------------------------------------------------------
## DISCLAIMER
##
## This file contains the rules to make an Eliom project. The project is
## configured through the variables in the file Makefile.options.
##----------------------------------------------------------------------

##----------------------------------------------------------------------
##                Internals

## Required binaries
OCSIGENSERVER     := ocsigenserver
OCSIGENSERVER.OPT := ocsigenserver.opt

ifneq ($(DEBUG),yes)
  DUNE_OPTIONS = --profile release
endif

##----------------------------------------------------------------------

##----------------------------------------------------------------------
## General

.PHONY: all css byte opt

DIST_DIRS          := $(ETCDIR) $(DATADIR) $(LIBDIR) $(LOGDIR) \
                      $(FILESDIR)/avatars/tmp $(ELIOMSTATICDIR) \
                      $(shell dirname $(CMDPIPE))
JS_PREFIX          := $(TEST_PREFIX)$(ELIOMSTATICDIR)/$(PROJECT_NAME)

all:: css byte opt staticfiles

##----------------------------------------------------------------------

##----------------------------------------------------------------------
## Testing

DIST_FILES = $(ELIOMSTATICDIR)/$(PROJECT_NAME).js $(LIBDIR)/$(PROJECT_NAME).cma

.PHONY: test.byte test.opt staticfiles

test.byte:: byte | $(addprefix $(TEST_PREFIX),$(DIST_DIRS)) staticfiles
	@echo "==== The website is available at http://localhost:$(TEST_PORT) ===="
	dune exec ./$(PROJECT_NAME)_main.bc
test.opt:: opt | $(addprefix $(TEST_PREFIX),$(DIST_DIRS)) staticfiles
	@echo "==== The website is available at http://localhost:$(TEST_PORT) ===="
	dune exec ./$(PROJECT_NAME)_main.exe

test.static.byte: test.byte

test.static.opt: test.opt

$(addprefix $(TEST_PREFIX), $(DIST_DIRS)):
	mkdir -p $@

staticfiles:
	cp -rf $(LOCAL_STATIC_CSS) $(LOCAL_STATIC_IMAGES) $(TEST_PREFIX)$(ELIOMSTATICDIR)
	

##----------------------------------------------------------------------
## Installing & Running

.PHONY: install install.static install.lib run
install: all install.static | $(addprefix $(PREFIX),$(DATADIR) $(LOGDIR) $(shell dirname $(CMDPIPE)))
	dune install
install.static: $(TEST_PREFIX)$(ELIOMSTATICDIR)/$(PROJECT_NAME).js | $(PREFIX)$(STATICDIR) $(PREFIX)$(ELIOMSTATICDIR)
	cp -r $(LOCAL_STATIC_CSS) $(PREFIX)$(FILESDIR)
	HASH=`md5sum _build/default/client/$(PROJECT_NAME).bc.js | cut -d ' ' -f 1` && \
	install $(addprefix -o ,$(WWWUSER)) $(JS_PREFIX)_$$HASH.js $(PREFIX)$(ELIOMSTATICDIR) && \
	ln -sf $(PROJECT_NAME)_$$HASH.js $(PREFIX)$(ELIOMSTATICDIR)/$(PROJECT_NAME).js
	[ -z $(WWWUSER) ] || chown -R $(WWWUSER) $(PREFIX)$(FILESDIR)

.PHONY:
print-install-files:
	@echo $(PREFIX)$(LIBDIR)
	@echo $(PREFIX)$(ELIOMSTATICDIR)
	@echo $(PREFIX)$(ETCDIR)

$(addprefix $(PREFIX),$(ETCDIR) $(LIBDIR)):
	install -d $@
$(addprefix $(PREFIX),$(DATADIR) $(LOGDIR) $(ELIOMSTATICDIR) $(shell dirname $(CMDPIPE))):
	install $(addprefix -o ,$(WWWUSER)) -d $@

##----------------------------------------------------------------------

##----------------------------------------------------------------------
## Compilation

.PHONY: gen-dune config-files

config-files: | $(TEST_PREFIX)$(ELIOMSTATICDIR) $(TEST_PREFIX)$(LIBDIR)
	HASH=`md5sum _build/default/client/$(PROJECT_NAME).bc.js | cut -d ' ' -f 1` && \
	cp -f _build/default/client/$(PROJECT_NAME).bc.js $(JS_PREFIX)_$$HASH.js && \
	ln -sf $(PROJECT_NAME)_$$HASH.js $(JS_PREFIX).js
	cp -f _build/default/$(PROJECT_NAME).cm* $(TEST_PREFIX)$(LIBDIR)/

all::
	$(ENV_PSQL) dune build $(DUNE_OPTIONS) @install @$(PROJECT_NAME)

js::
	$(ENV_PSQL) dune build $(DUNE_OPTIONS) client/$(PROJECT_NAME).bc.js

byte:: js
	$(ENV_PSQL) dune build $(DUNE_OPTIONS) $(PROJECT_NAME)_main.bc
	make config-files PROJECT_NAME=$(PROJECT_NAME)

opt:: js
	$(ENV_PSQL) dune build $(DUNE_OPTIONS) $(PROJECT_NAME)_main.exe
	make config-files PROJECT_NAME=$(PROJECT_NAME)

run:
	$(PREFIX)bin/$(PROJECT_NAME)


##----------------------------------------------------------------------

##----------------------------------------------------------------------
## Clean up

.PHONY: clean

clean::
	dune clean

===== ls =====
CNAME
LICENSE
Makefile
Makefile.app
Makefile.options
README.md
_build
assets
coucou.txt
drag.eliom
dune
dune-project
game.eliom
h42n42.eliom
h42n42.opam
h42n42_main.eliom
local
main_page.eliom
print.sh
s.txt
static
tools
